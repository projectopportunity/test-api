/* eslint-env mocha */
'use strict'

const T = require('./index.js')
const CONNECTION_STRING = 'sqlite::memory:'

describe('the datastore module', () => {
  it('should have a property called "init"', () => {
    const instance = T()
    expect(instance).to.have.property('init')
  })
  
  describe('the "init" property', () => {
    let instance
    const ERR_INVALID_INPUT = 'the init method requires a connection string parameter that is in the form of a URI'

    before(() => {
      instance = T()
      return instance.init(CONNECTION_STRING)
    })

    after(() => {
      return instance.reset()
    })

    it('should be a function', () => {
      const expected = 'function'
      const actual = typeof instance.init
      expect(actual).to.equal(expected)
    })

    describe('the returned value', () => {
      it('should be a promise', () => {
        const result = instance.init()
        return expect(result).to.be.rejected
      })
    })

    it('should throw an error if param is missing', () => {
      const result = instance.init()
      return expect(result).to.be.rejectedWith(ERR_INVALID_INPUT)
    })

    it('should throw an error for invalid parameter values', () => {
      const badValues = ['', 5, null, 'not a uri']
      return Promise.all(
        badValues.map((value) => {
          return expect(instance.init(value)).to.be.rejectedWith(ERR_INVALID_INPUT)
        })
      )
    })

    context('when provided a valid connection string', () => {
      it('should work', () => {
        const result = instance.init('sqlite::memory:')
        return expect(result).to.be.fulfilled
      })
    })
  })
})
