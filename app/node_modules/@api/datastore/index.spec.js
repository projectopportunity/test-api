/* eslint-env mocha */
const { expect } = require('chai')
const T = require('./index.js')
const chai = require('chai')
chai.use(require('chai-as-promised'))

describe('the datastore module', () => {
    it('should export a function', () => {
        const expected = 'function'
        const actual = typeof T
        expect(actual).to.equal(expected)
    })

    describe('the instance returned by the function', () => {
        it('should always refer to the same instance', () => {
            const expected = T()
            const actual = T()
            expect(actual).to.equal(expected)
        })

        it('should have a property called "createUser"', () => {
            const instance = T()
            expect(instance).to.have.property('createUser')
        })

        it('should have a property called "init"', () => {
            const instance = T()
            expect(instance).to.have.property('init')
        })

        describe('the "init" property', () => {
            let instance
            const ERR_INVALID_INPUT = 'the init method requires a connection string parameter that is in the form of a URI'
            
            before(() => {
                instance = T()
            })
            
            it('should be a function', () => {
                const expected = 'function'
                const actual = typeof instance.init
                expect(actual).to.equal(expected)
            })

            describe('the returned value', () => {
                it('should be a promise', () => {
                    const result = instance.init()
                    return expect(result).to.be.rejected
                })
            })

            it.skip('should throw an error if param is missing', () => {
                expect(() => {
                    instance.init()
                }).to.throw(ERR_INVALID_INPUT)
            })

            it.skip('should throw an error for invalid parameter values', () => {
                const badValues = ['', 5, null, 'not a uri']

                badValues.forEach((value) => {
                    expect(() => {
                        instance.init(value)
                    }).to.throw(ERR_INVALID_INPUT)
                })
            })

            context.skip('when provided a valid connection string', () => {
                it('should work', () => {
                    expect(() => {
                        instance.init('sqlite::memory:')
                    }).to.not.throw()
                })
            })
        })
    })
})