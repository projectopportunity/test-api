/* eslint-env mocha */
'use strict'

const { expect } = require('chai')
const T = require('./index.js')
const CONNECTION_STRING = 'sqlite::memory:'


describe('the datastore module', () => {
  it('should have a property called "getUser"', () => {
    const instance = T()
    expect(instance).to.have.property('getUser')
  })

  describe('the "getUser" property', () => {
    let instance

    before(() => {
      instance = T()
      return instance.init(CONNECTION_STRING)
    })

    after(() => {
      return instance.reset()
    })

    it('should be a function', () => {
      const expected = 'function'
      const actual = typeof instance.getUser
      expect(actual).to.equal(expected)
    })
    
    it('should throw an error if no parameter value is provided', () => {
      const ERR_INVALID_INPUT = 'Please provide a non-empty string'
      
      expect(() => {
        instance.getUser()
      }).to.throw(ERR_INVALID_INPUT )
    })

    describe('the returned value', () => {
      before(() => {
        return instance.reset()
      })

      context('when the init method has not been called', () => {
        it('should be rejected', () => {
          const result = instance.getUser()
          return expect(result).to.be.rejectedWith('Please call init first')
        })
      })

      context('when the init method has been called', () => {
        it.skip('should be resolve to a number', () => {
          return instance.init(CONNECTION_STRING)
            .then(() => {
              const result = instance.getUser({
                username: 'test@email.com',
                password: 'test',
                name: {
                  first: 'firstName',
                  last: 'lastName'
                }
              })
              return expect(result).to.eventually.be.a('number')
            })
        })
      })
    })
  })
})
