/* eslint-env mocha */
'use strict'

const { expect } = require('chai')
const T = require('./index.js')
const CONNECTION_STRING = 'sqlite::memory:'


describe('the datastore module', () => {
  it('should have a property called "getUser"', () => {
    const instance = T()
    expect(instance).to.have.property('getUser')
  })

  describe('the "getUser" property', () => {
    let instance
    const ERR_INVALID_INPUT = 'Please provide a non-empty string'

    before(() => {
      instance = T()
      return instance
        .init(CONNECTION_STRING)
        .createUser({
          first: 'get-user-first',
          last: 'get-user-last',
          username: 'get-user-username',
          password: 'get-user-password'
        })
    })

    after(() => {
      return instance.reset()
    })

    it('should be a function', () => {
      const expected = 'function'
      const actual = typeof instance.getUser
      expect(actual).to.equal(expected)
    })
    
    it('should throw an error if no parameter value is provided', () => {
      const result = instance.getUser()
      return expect(result).to.be.rejectedWith(ERR_INVALID_INPUT)
    })

    it('should throw an error if the param is not a string', () => {
      const badValues = ['', {}, null ]
      
      return Promise.all(
        badValues.map((value) => {
          return expect(instance.getUser(value)).to.be.rejectedWith(ERR_INVALID_INPUT)
        })
      )
    })

    describe('the returned value', () => {
      before(() => {
        return instance.reset()
      })

      context('when the init method has not been called', () => {
        it('should be rejected', () => {
          const result = instance.getUser('test@email.com')
          return expect(result).to.be.rejectedWith('Please call init first')
        })
      })

      context('when the init method has been called', () => {
        it('should resolve to an object', () => {
          return instance.init(CONNECTION_STRING)
            .then(() => {
              const result = instance.getUser('test@email.com')
              return expect(result).to.eventually.be.an('object')
            })
        })

        describe('the returned object', () => {
          it('should have the expected properties and values', async () => {
            const expected = {
              first: 'get-user-first',
              last: 'get-user-last',
              username: 'get-user-username',
              password: 'get-user-password'
            }

            await instance.init(CONNECTION_STRING)
            const actual = await instance.getUser('test@email.com')

            expect(actual).to.deep.equal(expected)
          })
        })
      })
    })
  })
})
